Call:   start
RESERVED_WORD token: package
  Consumed token: <"package" at line 1 column 1>
IDENTIFIER token: main
  Consumed token: <<IDENTIFIER>: "main" at line 1 column 9>
  Call:   statementList
IDENTIFIER token: i
    Call:   statement
RESERVED_WORD token: int
      Call:   declarationStatement
        Call:   variableDeclaration
          Call:   identifier
            Consumed token: <<IDENTIFIER>: "i" at line 2 column 1>
          Return: identifier
          Call:   type
            Consumed token: <"int" at line 2 column 3>
          Return: type
        Return: variableDeclaration
        Consumed token: <";" at line 2 column 6>
      Return: declarationStatement
    Return: statement
RESERVED_WORD token: for
    Call:   statement
      Call:   forStatement
        Consumed token: <"for" at line 3 column 1>
        Call:   forClause
IDENTIFIER token: i
EQUALS token: =
          Call:   assignmentStatement
            Call:   identifier
              Consumed token: <<IDENTIFIER>: "i" at line 3 column 5>
            Return: identifier
            Consumed token: <"=" at line 3 column 7>
            Call:   expression
              Call:   term
                Call:   operand
INTEGER_NUMBER token: 1
                  Call:   integerConstant
                    Consumed token: <<INTEGER_NUMBER>: "1" at line 3 column 9>
                  Return: integerConstant
                Return: operand
              Return: term
            Return: expression
          Return: assignmentStatement
          Consumed token: <";" at line 3 column 10>
          Call:   expression
            Call:   term
              Call:   operand
IDENTIFIER token: i
                Call:   identifier
                  Consumed token: <<IDENTIFIER>: "i" at line 3 column 12>
                Return: identifier
              Return: operand
LESS_EQUALS token: <=
            Return: term
            Consumed token: <"<=" at line 3 column 14>
            Call:   term
              Call:   operand
INTEGER_NUMBER token: 100
                Call:   integerConstant
                  Consumed token: <<INTEGER_NUMBER>: "100" at line 3 column 17>
                Return: integerConstant
              Return: operand
            Return: term
          Return: expression
          Consumed token: <";" at line 3 column 20>
IDENTIFIER token: i
INCREMENT token: ++
          Call:   increment
            Call:   identifier
              Consumed token: <<IDENTIFIER>: "i" at line 3 column 22>
            Return: identifier
            Consumed token: <"++" at line 3 column 23>
          Return: increment
        Return: forClause
        Call:   block
OPEN_BRACE token: {
          Consumed token: <"{" at line 3 column 26>
          Call:   statementList
            Call:   statement
              Call:   printStatement
                Consumed token: <"Println" at line 4 column 5>
OPEN_PAREN token: (
                Consumed token: <"(" at line 4 column 12>
                Call:   expression
                  Call:   term
                    Call:   operand
IDENTIFIER token: i
                      Call:   identifier
                        Consumed token: <<IDENTIFIER>: "i" at line 4 column 13>
                      Return: identifier
                    Return: operand
CLOSE_PAREN token: )
                  Return: term
                Return: expression
                Consumed token: <")" at line 4 column 14>
              Return: printStatement
              Consumed token: <";" at line 4 column 15>
            Return: statement
RESERVED_WORD token: if
            Call:   statement
              Call:   ifStatement
                Consumed token: <"if" at line 6 column 5>
                Call:   expression
                  Call:   term
                    Call:   operand
IDENTIFIER token: i
                      Call:   identifier
                        Consumed token: <<IDENTIFIER>: "i" at line 6 column 8>
                      Return: identifier
                    Return: operand
MODULO token: %
                    Consumed token: <"%" at line 6 column 10>
                    Call:   operand
INTEGER_NUMBER token: 3
                      Call:   integerConstant
                        Consumed token: <<INTEGER_NUMBER>: "3" at line 6 column 12>
                      Return: integerConstant
                    Return: operand
EQUAL_EQUAL token: ==
                  Return: term
                  Consumed token: <"==" at line 6 column 14>
                  Call:   term
                    Call:   operand
INTEGER_NUMBER token: 0
                      Call:   integerConstant
                        Consumed token: <<INTEGER_NUMBER>: "0" at line 6 column 17>
                      Return: integerConstant
                    Return: operand
OPEN_BRACE token: {
                  Return: term
                Return: expression
                Call:   block
                  Consumed token: <"{" at line 6 column 19>
                  Call:   statementList
                    Call:   statement
                      Call:   printStatement
                        Consumed token: <"Println" at line 7 column 9>
OPEN_PAREN token: (
                        Consumed token: <"(" at line 7 column 16>
                        Call:   expression
                          Call:   term
                            Call:   operand
INTERPRETED_STRING token: "fizz"
                              Call:   interpretedString
                                Consumed token: <<INTERPRETED_STRING>: ""fizz"" at line 7 column 17>
                              Return: interpretedString
                            Return: operand
CLOSE_PAREN token: )
                          Return: term
                        Return: expression
                        Consumed token: <")" at line 7 column 23>
                      Return: printStatement
                      Consumed token: <";" at line 7 column 24>
                    Return: statement
CLOSE_BRACE token: }
                  Return: statementList
                  Consumed token: <"}" at line 8 column 5>
                Return: block
RESERVED_WORD token: if
              Return: ifStatement
            Return: statement
            Call:   statement
              Call:   ifStatement
                Consumed token: <"if" at line 10 column 5>
                Call:   expression
                  Call:   term
                    Call:   operand
IDENTIFIER token: i
                      Call:   identifier
                        Consumed token: <<IDENTIFIER>: "i" at line 10 column 8>
                      Return: identifier
                    Return: operand
MODULO token: %
                    Consumed token: <"%" at line 10 column 10>
                    Call:   operand
INTEGER_NUMBER token: 5
                      Call:   integerConstant
                        Consumed token: <<INTEGER_NUMBER>: "5" at line 10 column 12>
                      Return: integerConstant
                    Return: operand
EQUAL_EQUAL token: ==
                  Return: term
                  Consumed token: <"==" at line 10 column 14>
                  Call:   term
                    Call:   operand
INTEGER_NUMBER token: 0
                      Call:   integerConstant
                        Consumed token: <<INTEGER_NUMBER>: "0" at line 10 column 17>
                      Return: integerConstant
                    Return: operand
OPEN_BRACE token: {
                  Return: term
                Return: expression
                Call:   block
                  Consumed token: <"{" at line 10 column 19>
                  Call:   statementList
                    Call:   statement
                      Call:   printStatement
                        Consumed token: <"Println" at line 11 column 9>
OPEN_PAREN token: (
                        Consumed token: <"(" at line 11 column 16>
                        Call:   expression
                          Call:   term
                            Call:   operand
INTERPRETED_STRING token: "buzz"
                              Call:   interpretedString
                                Consumed token: <<INTERPRETED_STRING>: ""buzz"" at line 11 column 17>
                              Return: interpretedString
                            Return: operand
CLOSE_PAREN token: )
                          Return: term
                        Return: expression
                        Consumed token: <")" at line 11 column 23>
                      Return: printStatement
                      Consumed token: <";" at line 11 column 24>
                    Return: statement
CLOSE_BRACE token: }
                  Return: statementList
                  Consumed token: <"}" at line 12 column 5>
                Return: block
CLOSE_BRACE token: }
              Return: ifStatement
            Return: statement
          Return: statementList
          Consumed token: <"}" at line 13 column 1>
        Return: block
      Return: forStatement
    Return: statement
  Return: statementList
  Consumed token: <<EOF> at line 14 column 1>
Return: start

===== CROSS-REFERENCE TABLE =====

*** PACKAGE main ***

Identifier       Line numbers    Type specification
----------       ------------    ------------------
i                002 003 003 003 004 006 010
                                 Defined as: variable
                                 Scope nesting level: 1
                                 Type form = scalar, Type id = int

===== INTERMEDIATE CODE =====

*** PACKAGE main ***

<statementList>
    <variableDeclaration>
        <identifier id="i" level="1" index="0" type_id="int" />
    </variableDeclaration>
    <forStatement>
        <forClause>
            <assignmentStatement type_id="int">
                <identifier id="i" level="1" index="0" type_id="int" />
                <integerConstant value="1" type_id="int" />
            </assignmentStatement>
            <lessEqual>
                <identifier id="i" level="1" index="0" type_id="int" />
                <integerConstant value="100" type_id="int" />
            </lessEqual>
            <increment type_id="int">
                <identifier id="i" level="1" index="0" type_id="int" />
            </increment>
        </forClause>
        <block>
            <statementList>
                <printStatement type_id="int">
                    <identifier id="i" level="1" index="0" type_id="int" />
                </printStatement>
                <ifStatement>
                    <equalEqual>
                        <modulo type_id="int">
                            <identifier id="i" level="1" index="0" type_id="int"
                            />
                            <integerConstant value="3" type_id="int" />
                        </modulo>
                        <integerConstant value="0" type_id="int" />
                    </equalEqual>
                    <block>
                        <statementList>
                            <printStatement type_id="string">
                                <interpretedString value=""fizz"" 
                                    type_id="string" />
                            </printStatement>
                        </statementList>
                    </block>
                </ifStatement>
                <ifStatement>
                    <equalEqual>
                        <modulo type_id="int">
                            <identifier id="i" level="1" index="0" type_id="int"
                            />
                            <integerConstant value="5" type_id="int" />
                        </modulo>
                        <integerConstant value="0" type_id="int" />
                    </equalEqual>
                    <block>
                        <statementList>
                            <printStatement type_id="string">
                                <interpretedString value=""buzz"" 
                                    type_id="string" />
                            </printStatement>
                        </statementList>
                    </block>
                </ifStatement>
            </statementList>
        </block>
    </forStatement>
</statementList>

Process finished with exit code 0
