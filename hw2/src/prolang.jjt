/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. prolang.jj */
/*@egen*/options{
COMMON_TOKEN_ACTION = false;
STATIC = false;
                                       
}

PARSER_BEGIN(ProlangParser)
package wci.frontend;

import java.util.ArrayList;
import java.io.*;

import wci.intermediate.*;
import wci.intermediate.symtabimpl.*;
import wci.backend.*;
import wci.util.*;

import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.symtabimpl.DefinitionImpl.*;
import static wci.intermediate.symtabimpl.RoutineCodeImpl.*;
import static wci.intermediate.symtabimpl.SymTabKeyImpl.*;
import static wci.intermediate.icodeimpl.ICodeKeyImpl.*;
public class ProlangParser/*@bgen(jjtree)*/implements ProlangParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTProlangParserState jjtree = new JJTProlangParserState();

/*@egen*/

    private static ArrayList<Integer> counter = new ArrayList<Integer>();
    private static SymTabStack symTabStack;
    private static SymTabEntry programId;
    public static void main(String[] args) throws Exception
    {
        //create and initialize the symbol table stack

        symTabStack = SymTabFactory.createSymTabStack();
        Predefined.initialize(symTabStack);
        Reader sr = new BufferedReader(new FileReader(args[0]));
        ProlangParser parser = new ProlangParser(sr);


            SimpleNode rootNode = parser.program();

        // Print the cross-reference table.
        CrossReferencer crossReferencer = new CrossReferencer();
        crossReferencer.print(symTabStack);

        // Visit the parse tree nodes to decorate them with type information.
        TypeSetterVisitor typeVisitor = new TypeSetterVisitor();
        rootNode.jjtAccept(typeVisitor, null);
        // Create and initialize the ICode wrapper for the parse tree.
        ICode iCode = ICodeFactory.createICode();
        iCode.setRoot(rootNode);
        programId.setAttribute(ROUTINE_ICODE, iCode);

        // Print the parse tree.
        ParseTreePrinter treePrinter = new ParseTreePrinter(System.out);
        treePrinter.print(symTabStack);
    }

}
PARSER_END(ProlangParser)
TOKEN_MGR_DECLS :
{
    void CommonTokenAction(Token t)
    {
            System.out.printf(
                ">> kind=%3d line=%3d column=%3d image=%s%n",
                t.kind, t.beginLine, t.beginColumn, t.endLine,
                 t.image);
    }
}

SKIP : {
    <IGNORE : [" ", ",", "\n", "\t"]>
    |<COMMENT_LINE : "//" (~["\n"])* "\n">
    |<COMMENT_BLOCK: "/*" (~["*"])* |
                      "/*" (~["*"])* "*" (~["/"])* |
                      "/*" (~["*"])* "*" (~["/"])* "/" >
}

TOKEN : {
  /*************************
  Reserved Words
  *************************/
    <ABSTRACT: "abstract">
    {debugStream.println("ABSTRACT: "+ matchedToken.image);}
  | <BOOLEAN : "boolean">
     {debugStream.println("BOOLEAN: "+ matchedToken.image);}
  | <BREAK : "break">
      {debugStream.println("BREAK: "+ matchedToken.image);}
  | <BYTE : "byte">
  {debugStream.println("BYTE: "+ matchedToken.image);}
  | <CASE : "case">
  {debugStream.println("CASE: "+ matchedToken.image);}
  | <CATCH : "catch">
  {debugStream.println("CATCH: "+ matchedToken.image);}
  | <CHAR : "char">
  {debugStream.println("CHAR: "+ matchedToken.image);}
  | <CLASS : "class">
  {debugStream.println("CLASS: "+ matchedToken.image);}
  | <CONST : "const">
  {debugStream.println("CONST: "+ matchedToken.image);}
  | <CONTINUE : "continue">
  {debugStream.println("CONTINUE: "+ matchedToken.image);}
  | <DEF : "default">
  {debugStream.println("DEFAULT: "+ matchedToken.image);}
  | <DO : "do">
  {debugStream.println("DO: "+ matchedToken.image);}
  | <DOUBLE : "double">
  {debugStream.println("DOUBLE: "+ matchedToken.image);}
  | <ELSE : "else">
  {debugStream.println("ELSE: "+ matchedToken.image);}
  | <ENUM : "enum">
  {debugStream.println("ENUM: "+ matchedToken.image);}
  | <EXTENDS : "extends">
  {debugStream.println("EXTENDS: "+ matchedToken.image);}
  | <FALSE : "false">
  {debugStream.println("FALSE: "+ matchedToken.image);}
  | <FINAL : "final">
  {debugStream.println("FINAL: "+ matchedToken.image);}
  | <FINALLY : "finally">
  {debugStream.println("FINALLY: "+ matchedToken.image);}
  | <FLOAT : "float">
  {debugStream.println("FLOAT: "+ matchedToken.image);}
  | <FOR : "for">
  {debugStream.println("FOR: "+ matchedToken.image);}
  | <GOTO : "goto">
  {debugStream.println("GOTO: "+ matchedToken.image);}
  | <IF : "if">
  {debugStream.println("IF: "+ matchedToken.image);}
  | <IMPLEMENTS : "implements">
  {debugStream.println("IMPLEMENTS: "+ matchedToken.image);}
  | <IMPORTS : "imports">
  {debugStream.println("IMPORTS: "+ matchedToken.image);}
  | <INSTANCEOF : "instanceof">
  {debugStream.println("INSTANCEOF: "+ matchedToken.image);}
  | <INT : "int">
  {debugStream.println("INT: "+ matchedToken.image);}
  | <INTERFACE : "instance">
  {debugStream.println("INTERFACE: "+ matchedToken.image);}
  | <LONG : "long">
  {debugStream.println("LONG: "+ matchedToken.image);}
  | <NATIVE : "native">
  {debugStream.println("NATIVE: "+ matchedToken.image);}
  | <NEW : "new">
  {debugStream.println("NEW: "+ matchedToken.image);}
  | <NULL : "null">
  {debugStream.println("NULL: "+ matchedToken.image);}
  | <PACKAGE : "package">
  {debugStream.println("PACKAGE: "+ matchedToken.image);}
  | <PRIVATE : "private">
  {debugStream.println("PRIVATE: "+ matchedToken.image);}
  | <PROTECTED : "protected">
  {debugStream.println("PROTECTED: "+ matchedToken.image);}
  | <PUBLIC : "public">
  {debugStream.println("PUBLIC: "+ matchedToken.image);}
  | <RETURN : "return">
  {debugStream.println("RETURN: "+ matchedToken.image);}
  | <SHORT : "short">
  {debugStream.println("SHORT: "+ matchedToken.image);}
  | <STATIC : "static">
  {debugStream.println("STATIC: "+ matchedToken.image);}
  | <STRICTFP : "strictfp">
  {debugStream.println("SRICTFP: "+ matchedToken.image);}
  | <SUPER : "super">
  {debugStream.println("SUPER: "+ matchedToken.image);}
  | <SWITCH : "switch">
  {debugStream.println("SWITCH: "+ matchedToken.image);}
  | <SYCHRONIZED : "sychronized">
  {debugStream.println("SYCHRONIZED: "+ matchedToken.image);}
  | <THIS : "this">
  {debugStream.println("THIS: "+ matchedToken.image);}
  | <THROW : "throw">
  {debugStream.println("THR: "+ matchedToken.image);}
  | <THROWS : "throws">
  {debugStream.println("THROWS: "+ matchedToken.image);}
  | <TRANSIENT : "transient">
  {debugStream.println("TRANSIENT: "+ matchedToken.image);}
  | <TRUE : "true">
  {debugStream.println("TRUE: "+ matchedToken.image);}
  | <TRY : "try">
  {debugStream.println("TRY: "+ matchedToken.image);}
  | <VOID : "void">
  {debugStream.println("VOID: "+ matchedToken.image);}
  | <VOLATILE : "volatile">
  {debugStream.println("VOLATILE: "+ matchedToken.image);}
  | <WHILE : "while">
      {debugStream.println("WHILE: "+ matchedToken.image);}
  |<STRING_TYPE:"STRING">
  /*************************
  Numbers
  *************************/
  | <DECIMAL : "0" | (["1"-"9"])(<DIGIT>)*>
     {debugStream.println("DECIMAL: "+ matchedToken.image);}
  | <OCTAL : "0" (["0"-"7"])*>
     {debugStream.println("OCTAL: "+ matchedToken.image);}
  | <HEX  : "0" ["x", "X"] ((<DIGIT>)|(["A"-"F"])|(["a"-"f"]))+ >
    {debugStream.println("HEX: "+ matchedToken.image);}
  | <REAL: (<DIGIT>)+ "." (<DIGIT>)* (<DECIMAL_EXPONENT>)?
          | "." (<DIGIT>)+ (<DECIMAL_EXPONENT>)?
          | (<DIGIT>)+ (<DECIMAL_EXPONENT>)?>
    {debugStream.println("REAL: "+ matchedToken.image);}
  | <#DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (<DIGIT>)+>
  | <#DIGIT : ["0"-"9"]>
  | <#LOWER_CASE : ["a"-"z"]>
  | <#UPPER_CASE : ["A"-"Z"]>
  | <#LETTER : (<LOWER_CASE>)|(<UPPER_CASE>)>
  | <IDD : <LETTER>(<LETTER>|<DIGIT>|"_")*>
    {debugStream.println("IDENTIFIER: "+ matchedToken.image);}
  | <CHARARCTER : "'" ~[] "'">
    {System.out.println("CHARACTER :" + matchedToken.image);}
  | <STRING : "\"" (~["\n"])* "\"">
    {System.out.println("STRING :" + matchedToken.image);}
    /*************************
    Separators
    *************************/
  | <LPAREN: "(">
    {debugStream.println("LPAREN: "+ matchedToken.image);}
  | <RPAREN: ")">
    {debugStream.println("RPAREN: "+ matchedToken.image);}
  | <LBRACE: "{">
    {debugStream.println("LBRACE: "+ matchedToken.image);}
  | <RBRACE: "}">
    {debugStream.println("RBRACE: "+ matchedToken.image);}
  | <LBRACKET: "[">
    {debugStream.println("LBRACKET: "+ matchedToken.image);}
  | <RBRACKET: "]">
    {debugStream.println("RBRACKET: "+ matchedToken.image);}
  | <SEMICOLON: ";">
    {debugStream.println("SEMICOLON: "+ matchedToken.image);}
  | <COMMA: ",">
    {debugStream.println("COMMA: "+ matchedToken.image);}
  | <DOT: ".">
    {debugStream.println("DOT: "+ matchedToken.image);}
  /*************************
  Operators
  *************************/
  |<ASSIGN: "=">
    {debugStream.println("ASSIGN: "+ matchedToken.image);}
  | <LT: "<">
    {debugStream.println("LT: "+ matchedToken.image);}
  | <BANG: "!">
    {debugStream.println("BANG: "+ matchedToken.image);}
  | <TILDE: "~">
    {debugStream.println("TILDE: "+ matchedToken.image);}
  | <HOOK: "?">
    {debugStream.println("HOOK: "+ matchedToken.image);}
  | <COLON: ":">
    {debugStream.println("COLON: "+ matchedToken.image);}
  | <EQ: "==">
    {debugStream.println("EQ: "+ matchedToken.image);}
  | <LE: "<=">
    {debugStream.println("LE: "+ matchedToken.image);}
  | <GE: ">=">
    {debugStream.println("GE: "+ matchedToken.image);}
  | <NE: "!=">
    {debugStream.println("NE: "+ matchedToken.image);}
  | <SC_OR: "||">
    {debugStream.println("SC_OR: "+ matchedToken.image);}
  | <SC_AND: "&&">
    {debugStream.println("SC_AND: "+ matchedToken.image);}
  | <INCR: "++">
    {debugStream.println("ICNR: "+ matchedToken.image);}
  | <DECR: "--">
    {debugStream.println("DECR: "+ matchedToken.image);}
  | <PLUS: "+">
    {debugStream.println("PLUS: "+ matchedToken.image);}
  | <MINUS: "-">
    {debugStream.println("MINUS: "+ matchedToken.image);}
  | <STAR: "*">
    {debugStream.println("STAR: "+ matchedToken.image);}
  | <SLASH: "/">
    {debugStream.println("SLASH: "+ matchedToken.image);}
  | <BIT_AND: "&">
    {debugStream.println("BIT_AND: "+ matchedToken.image);}
  | <BIT_OR: "|">
    {debugStream.println("BIT_OR: "+ matchedToken.image);}
  | <XOR: "^">
    {debugStream.println("XOR: "+ matchedToken.image);}
  | <REM: "%">
    {debugStream.println("REM: "+ matchedToken.image);}
  | <PLUSASSIGN: "+=">
    {debugStream.println("PLUS_ASSIGN: "+ matchedToken.image);}
  | <MINUSASSIGN: "-=">
    {debugStream.println("MINUS_ASSIGN: "+ matchedToken.image);}
  | <STARASSIGN: "*=">
    {debugStream.println("STAR_ASSIGN: "+ matchedToken.image);}
  | <SLASHASSIGN: "/=">
    {debugStream.println("SLASH_ASSIGN: "+ matchedToken.image);}
  | <ANDASSIGN: "&=">
    {debugStream.println("AND_ASSIGN: "+ matchedToken.image);}
  | <ORASSIGN: "|=">
    {debugStream.println("OR_ASSIGN: "+ matchedToken.image);}
  | <XORASSIGN: "^=">
    {debugStream.println("XOR_ASSIGN: "+ matchedToken.image);}
  | <REMASSIGN: "%=">
    {debugStream.println("REM_ASSIGN: "+ matchedToken.image);}
  | <RSHIFT_ASSIGN : ">>=">
    {debugStream.println("RSHIFT_ASSIGN: "+ matchedToken.image);}
  | <LSHIFT_ASSIGN : "<<=">
      {debugStream.println("LSHIFT_ASSIGN: "+ matchedToken.image);}
  |<RELATIONAL_OPERATORS: (<LT>|<EQ>|<GE>|<LE>|<NE>|<SC_OR>|<SC_AND>)>
  |<TYPE: (<INT>)>

}

TOKEN: { /*	Error token */
    <ERROR : ~["\r", "\n"]>
}

/*
******************Grammar*******************
program \u2192 statementList
********************************************
*/
SimpleNode program()       :{SimpleNode rootNode;}
{
    try{
    rootNode = statementList()
    <EOF>
    {return rootNode;}
    }
    catch(ParseException ex)
    {
        handleError(ex);
        return null;
    }
}

/*
******************Grammar*******************
statementList \u2192 statement
********************************************
*/
SimpleNode statementList() :{/*@bgen(jjtree) statementList */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) statementList */
    try {
/*@egen*/
    (statement())*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

/*
******************Grammar*******************
statement \u2192 assignmentStatement | loopStatement
         | variable_declaration | ifStatmentement
********************************************
*/
void statement() :{/*@bgen(jjtree) statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) statement */
    try {
/*@egen*/
    try{
    assignmentStatement()
    | loopStatement()
    | variable_declaration()
    | ifStatement()
    }
    catch(ParseException ex)
    {
        handleError(ex);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

/*
******************Grammar*******************
assignmentStatment \u2192 ID \u201c=\u201d expr \u201c;\u201d
********************************************
*/
void assignmentStatement() : {/*@bgen(jjtree) assignmentStatement */
                               SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTSTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/ SimpleNode variableNode;}
{/*@bgen(jjtree) assignmentStatement */
    try {
/*@egen*/
    variableNode = identifier(false)
    {
        SymTabEntry variableId = symTabStack.lookup(token.image);
        TypeSpec typeId = variableId.getTypeSpec();
        variableNode.setAttribute(ID, variableId);
    }
    <ASSIGN>
     expr()
     (<HOOK>)?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
******************Grammar*******************
expr \u2192 simple expression ((relationship operators) simple expression)?
********************************************
*/
void expr()      :{}
{
    simpleExpression()
   (
    <RELATIONAL_OPERATORS>
    simpleExpression()
   )?
}

/*
******************Grammar*******************
simple expression \u2192 (+|-)? term (+|-|or term)* | term
********************************************
*/
void simpleExpression() :{/*@bgen(jjtree) simpleExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSIMPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) simpleExpression */
    try {
/*@egen*/
    LOOKAHEAD(2)
 	( (<PLUS> | <MINUS>)? term()
	  	(
	  	  (<PLUS> | <MINUS> | <SC_OR>)
	  	  term()
	  	)*
  	) | term()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/*
******************Grammar*******************
term \u2192 factor (+|-|/|and factor)* | factor
********************************************
*/
void term()     :{}
{
    LOOKAHEAD(2)
  (
    factor()
    	(  
			(<STAR>| <SLASH> | <REM> | <SC_AND>)
			factor()
		)*
  ) | factor()
}

/*
******************Grammar*******************
factor \u2192 identifier| integer | string
********************************************
*/
void factor()       : {}
{
    (
        (
            identifier(false) | LOOKAHEAD(2) integerConstant()
            | stringType()
        )
        | "(" expr() ")"
    )
}


void stringType() : {/*@bgen(jjtree) stringType */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRINGTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) stringType */
    try {
/*@egen*/
    < STRING >/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setTypeSpec(Predefined.charType);
        jjtn000.setAttribute(VALUE, token.image.toString());
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void loopStatement():{/*@bgen(jjtree) loopStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) loopStatement */
    try {
/*@egen*/
    while_loop()
    |for_loop()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

void while_loop() :{/*@bgen(jjtree) while_loop */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE_LOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) while_loop */
    try {
/*@egen*/
    <WHILE>
        "("
        expr()
        ")"
        codeBlock()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void for_loop() :{/*@bgen(jjtree) for_loop */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR_LOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) for_loop */
    try {
/*@egen*/
    <FOR>
    "("
    assignmentStatement()

    expr()
    <SEMICOLON>
    assignmentStatement()
    ")"
    codeBlock()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void codeBlock() :{/*@bgen(jjtree) codeBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTCODEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) codeBlock */
    try {
/*@egen*/
    try{
    <LBRACE>
    (statementList()|{})
    <RBRACE>
    } catch(ParseException ex)
    {
        handleError(ex);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ifStatement():{/*@bgen(jjtree) ifStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ifStatement */
    try {
/*@egen*/
    try

    {
    <IF>
    "("
    expr()
    ")"
    codeBlock()
    else_statement()
    }

    catch(ParseException ex)
    {
        handleError(ex);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void else_statement():{/*@bgen(jjtree) else_statement */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) else_statement */
    try {
/*@egen*/
    <ELSE>
    codeBlock()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void variable_declaration() throws ParseException :
{/*@bgen(jjtree) variable_declaration */
    SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE_DECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    SimpleNode variableNode;
}
{/*@bgen(jjtree) variable_declaration */
    try {
/*@egen*/
    try {
         (
            type()
          {
               SymTabEntry typeId = symTabStack.lookup(token.image);
               TypeSpec type = typeId.getTypeSpec();
          }
         )

        variableNode = identifier(true) {
            SymTabEntry variableId = (SymTabEntry) variableNode.getAttribute(ID);
            variableNode.setAttribute(ID, variableId);
            int count = counter.get(counter.size() - 1);
            variableId.setIndex(count++);
            counter.set(counter.size() - 1, count);
        }
        (

            {
                variableId.setTypeSpec(type);
                variableNode.setTypeSpec(type);
            }
        )
    }
    catch (ParseException ex) {
        handleError(ex);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void type()       : {}
{
    <INT>|<STRING_TYPE>
}

SimpleNode identifier(boolean declaration) : {/*@bgen(jjtree) identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) identifier */
    try {
/*@egen*/
    try {
        <IDD>
        {
            SymTabEntry variableId = symTabStack.lookup(token.image);

            if (declaration) {
                variableId = symTabStack.lookupLocal(token.image);
                if (variableId != null) {
                    throw new ParseException("ERROR: Variable already declared.");
                }

                variableId = symTabStack.enterLocal(token.image);
                variableId.appendLineNumber(token.beginLine);
                variableId.setDefinition(DefinitionImpl.VARIABLE);
                jjtn000.setAttribute(ID, variableId);
            }
            else if (variableId != null) {
                variableId.appendLineNumber(token.beginLine);
                TypeSpec type = variableId.getTypeSpec();
                jjtn000.setTypeSpec(type);
                jjtn000.setAttribute(ID, variableId);
            }
            else {
                throw new ParseException("ERROR: Variable has not been declared.");
            }

            return jjtn000;
        }
    }
    catch (ParseException ex) {
        handleError(ex);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void integerConstant() : {/*@bgen(jjtree) integerConstant */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGERCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) integerConstant */
    try {
/*@egen*/
    <DECIMAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setTypeSpec(Predefined.integerType);
        jjtn000.setAttribute(VALUE, Integer.parseInt(token.image));
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

JAVACODE
void processVariableDecl(Token token, int index,
                         ArrayList<SymTabEntry> variableList)      
{
    SymTabEntry variableId = symTabStack.enterLocal(token.image);
    variableId.setIndex(index);
    variableId.setDefinition(DefinitionImpl.VARIABLE);
    variableId.appendLineNumber(token.beginLine);
    variableList.add(variableId);
}

JAVACODE
String handleError(ParseException ex)      
{
    Token token = ex.currentToken;
    System.out.println(ex.getMessage());

    do {
    	token = getNextToken();
    } while (token.kind != SEMICOLON);

	jjtree.popNode();
    return token.image;
}
