/* Generated By:JavaCC: Do not edit this line. ProlangParserTokenManager.java */
import java.io.*;

/** Token Manager. */
public class ProlangParserTokenManager implements ProlangParserConstants
{
    void CommonTokenAction(Token t)
    {
            System.out.printf(
                ">> kind=%3d line=%3d column=%3d image=%s%n",
                t.kind, t.beginLine, t.beginColumn, t.endLine,
                 t.image);
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x1000L) != 0L)
            return 4;
         if ((active0 & 0xfffffffffffff0L) != 0L)
         {
            jjmatchedKind = 65;
            return 9;
         }
         if ((active1 & 0x4040000000L) != 0L)
            return 28;
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 1;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0xfffffffbfe7ff0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 1;
            }
            return 9;
         }
         if ((active0 & 0x4018000L) != 0L)
            return 9;
         return -1;
      case 2:
         if ((active0 & 0xeffffbbaff7ff0L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 2;
            return 9;
         }
         if ((active0 & 0x10000441000000L) != 0L)
            return 9;
         return -1;
      case 3:
         if ((active0 & 0xc77ff2b8f97a70L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
            return 9;
         }
         if ((active0 & 0x28800902060580L) != 0L)
            return 9;
         return -1;
      case 4:
         if ((active0 & 0x446df2b8096030L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 4;
            }
            return 9;
         }
         if ((active0 & 0x83120000f01a40L) != 0L)
            return 9;
         return -1;
      case 5:
         if ((active0 & 0x444870b8486030L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 5;
            return 9;
         }
         if ((active0 & 0x2258200010000L) != 0L)
            return 9;
         return -1;
      case 6:
         if ((active0 & 0x3010484020L) != 0L)
            return 9;
         if ((active0 & 0x444840a8002010L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
            return 9;
         }
         return -1;
      case 7:
         if ((active0 & 0x4404008000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 7;
            }
            return 9;
         }
         if ((active0 & 0x400800a0002010L) != 0L)
            return 9;
         return -1;
      case 8:
         if ((active0 & 0x400028000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 8;
            return 9;
         }
         if ((active0 & 0x4004000000000L) != 0L)
            return 9;
         return -1;
      case 9:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 9;
            return 9;
         }
         if ((active0 & 0x28000000L) != 0L)
            return 9;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 37:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L);
      case 38:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8001000000L);
      case 40:
         return jjStopAtPos(0, 68);
      case 41:
         return jjStopAtPos(0, 69);
      case 42:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L);
      case 43:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x802000000L);
      case 44:
         return jjStopAtPos(0, 1);
      case 45:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1004000000L);
      case 46:
         return jjStartNfaWithStates_0(0, 76, 4);
      case 47:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L);
      case 58:
         return jjStopAtPos(0, 82);
      case 59:
         return jjStopAtPos(0, 74);
      case 60:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000100000L);
      case 61:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000200000L);
      case 63:
         return jjStopAtPos(0, 81);
      case 91:
         return jjStopAtPos(0, 72);
      case 93:
         return jjStopAtPos(0, 73);
      case 94:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0xe0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3f00L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1c000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xe0000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1f00000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xfc000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xe00000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xf000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x7e0000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1f800000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x60000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 70);
      case 124:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000800000L);
      case 125:
         return jjStopAtPos(0, 71);
      case 126:
         return jjStopAtPos(0, 80);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         break;
      case 43:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         break;
      case 45:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         break;
      case 60:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000L);
      case 61:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         break;
      case 62:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1200100300L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10400004000L, active1, 0L);
      case 102:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 9);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x83820000000400L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x820800L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xe0040000L, active1, 0L);
      case 111:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x60000103013020L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c006000000040L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x108800000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000080L, active1, 0L);
      case 124:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(2, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(2, 108);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4040000000c00L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x401000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0a02000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000800100000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100603000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x24000800020L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100018000000L, active1, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x3080000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0020110L, active1, 0L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x10202080280L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000050000L, active1, 0L);
      case 119:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 9);
         break;
      case 121:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000e04040L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 100:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 9);
         break;
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 9);
         else if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 9);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 9);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000080000L);
      case 103:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 9);
         break;
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80200000000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 108:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x80008008000020L);
      case 109:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 9);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 111:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x3000010000000L);
      case 114:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x101800L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2440a0002010L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x30a0000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x280000000000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 9);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x4008000020L);
      case 104:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x48000002000L);
      case 107:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 9);
         break;
      case 108:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x410000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x410010000010L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 9);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 9);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 119:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x30L);
      case 99:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 9);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 9);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 9);
         break;
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 104:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x44000000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x404000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0xa0002000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 9);
         break;
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x82010000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0xa0000010L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 9);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000008000000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L);
      case 110:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 9);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 9);
         break;
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 13, 9);
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 54, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0x4020000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000008000000L);
      case 112:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 9);
         break;
      case 116:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 4, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 9);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 50, 9);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L);
      case 102:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 29, 9);
         break;
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 46, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 46;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0x100100000600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 47)
                     jjAddStates(4, 7);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(14, 15);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  break;
               case 28:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(38, 39);
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(29, 30);
                  if (curChar == 42)
                     jjCheckNAddTwoStates(34, 35);
                  if (curChar == 42)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(32);
                  }
                  break;
               case 1:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(7);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if (curChar == 39 && kind > 66)
                     kind = 66;
                  break;
               case 13:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 34 && kind > 67)
                     kind = 67;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddStates(0, 3);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar != 46)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if (curChar == 47)
                     jjAddStates(4, 7);
                  break;
               case 29:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 31:
                  if (curChar != 42)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0xfffffbffffffffffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 34:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar != 42)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0xffff7fffffffffffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 38:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 40:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               case 42:
                  if (curChar != 48)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 43:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(43);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjstateSet[jjnewStateCnt++] = 45;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(9);
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(9);
                  break;
               case 11:
                  jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  jjAddStates(10, 11);
                  break;
               case 20:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(12, 13);
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(14, 15);
                  break;
               case 29:
                  jjAddStates(16, 17);
                  break;
               case 32:
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  jjAddStates(18, 19);
                  break;
               case 36:
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  jjAddStates(20, 21);
                  break;
               case 40:
                  jjAddStates(22, 23);
                  break;
               case 44:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 11);
                  break;
               case 29:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(16, 17);
                  break;
               case 32:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(18, 19);
                  break;
               case 36:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(20, 21);
                  break;
               case 40:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(22, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 46 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   17, 18, 23, 24, 28, 31, 33, 37, 6, 7, 14, 15, 21, 22, 25, 26, 
   29, 30, 34, 35, 38, 39, 40, 41, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\141\142\163\164\162\141\143\164", 
"\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", 
"\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\156\165\155", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164\163", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\163\164\141\156\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167", 
"\156\165\154\154", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
"\163\150\157\162\164", "\163\164\141\164\151\143", "\163\164\162\151\143\164\146\160", 
"\163\165\160\145\162", "\163\167\151\164\143\150", "\163\171\143\150\162\157\156\151\172\145\144", 
"\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", null, null, null, null, null, null, null, null, null, 
null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", 
"\75", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", 
"\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", 
"\136", "\45", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", 
"\45\75", "\76\76\75", "\74\74\75", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff1L, 0x1ffffffffffeL, 
};
static final long[] jjtoSkip = {
   0xeL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[46];
private final int[] jjstateSet = new int[92];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ProlangParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ProlangParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 46; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         CommonTokenAction(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 4 :
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
     debugStream.println("ABSTRACT: "+ matchedToken.image);
         break;
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
      debugStream.println("BOOLEAN: "+ matchedToken.image);
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
       debugStream.println("BREAK: "+ matchedToken.image);
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
   debugStream.println("BYTE: "+ matchedToken.image);
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
   debugStream.println("CASE: "+ matchedToken.image);
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
   debugStream.println("CATCH: "+ matchedToken.image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
   debugStream.println("CHAR: "+ matchedToken.image);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
   debugStream.println("CLASS: "+ matchedToken.image);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
   debugStream.println("CONST: "+ matchedToken.image);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
   debugStream.println("CONTINUE: "+ matchedToken.image);
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
   debugStream.println("DEFAULT: "+ matchedToken.image);
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
   debugStream.println("DO: "+ matchedToken.image);
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
   debugStream.println("DOUBLE: "+ matchedToken.image);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
   debugStream.println("ELSE: "+ matchedToken.image);
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
   debugStream.println("ENUM: "+ matchedToken.image);
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
   debugStream.println("EXTENDS: "+ matchedToken.image);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
   debugStream.println("FALSE: "+ matchedToken.image);
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
   debugStream.println("FINAL: "+ matchedToken.image);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
   debugStream.println("FINALLY: "+ matchedToken.image);
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
   debugStream.println("FLOAT: "+ matchedToken.image);
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
   debugStream.println("FOR: "+ matchedToken.image);
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
   debugStream.println("GOTO: "+ matchedToken.image);
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
   debugStream.println("IF: "+ matchedToken.image);
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
   debugStream.println("IMPLEMENTS: "+ matchedToken.image);
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
   debugStream.println("IMPORTS: "+ matchedToken.image);
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
   debugStream.println("INSTANCEOF: "+ matchedToken.image);
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
   debugStream.println("INT: "+ matchedToken.image);
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
   debugStream.println("INTERFACE: "+ matchedToken.image);
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
   debugStream.println("LONG: "+ matchedToken.image);
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
   debugStream.println("NATIVE: "+ matchedToken.image);
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
   debugStream.println("NEW: "+ matchedToken.image);
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
   debugStream.println("NULL: "+ matchedToken.image);
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
   debugStream.println("PACKAGE: "+ matchedToken.image);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
   debugStream.println("PRIVATE: "+ matchedToken.image);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
   debugStream.println("PROTECTED: "+ matchedToken.image);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
   debugStream.println("PUBLIC: "+ matchedToken.image);
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
   debugStream.println("RETURN: "+ matchedToken.image);
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
   debugStream.println("SHORT: "+ matchedToken.image);
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
   debugStream.println("STATIC: "+ matchedToken.image);
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
   debugStream.println("SRICTFP: "+ matchedToken.image);
         break;
      case 44 :
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
   debugStream.println("SUPER: "+ matchedToken.image);
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
   debugStream.println("SWITCH: "+ matchedToken.image);
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
   debugStream.println("SYCHRONIZED: "+ matchedToken.image);
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
   debugStream.println("THIS: "+ matchedToken.image);
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
   debugStream.println("THR: "+ matchedToken.image);
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
   debugStream.println("THROWS: "+ matchedToken.image);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
   debugStream.println("TRANSIENT: "+ matchedToken.image);
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
   debugStream.println("TRUE: "+ matchedToken.image);
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
   debugStream.println("TRY: "+ matchedToken.image);
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
   debugStream.println("VOID: "+ matchedToken.image);
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
   debugStream.println("VOLATILE: "+ matchedToken.image);
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
       debugStream.println("WHILE: "+ matchedToken.image);
         break;
      case 56 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("DECIMAL: "+ matchedToken.image);
         break;
      case 57 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      debugStream.println("OCTAL: "+ matchedToken.image);
         break;
      case 58 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     debugStream.println("HEX: "+ matchedToken.image);
         break;
      case 59 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     debugStream.println("REAL: "+ matchedToken.image);
         break;
      case 65 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     debugStream.println("IDENTIFIER: "+ matchedToken.image);
         break;
      case 66 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     System.out.println("CHARACTER :" + matchedToken.image);
         break;
      case 67 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     System.out.println("STRING :" + matchedToken.image);
         break;
      case 68 :
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
     debugStream.println("LPAREN: "+ matchedToken.image);
         break;
      case 69 :
        image.append(jjstrLiteralImages[69]);
        lengthOfMatch = jjstrLiteralImages[69].length();
     debugStream.println("RPAREN: "+ matchedToken.image);
         break;
      case 70 :
        image.append(jjstrLiteralImages[70]);
        lengthOfMatch = jjstrLiteralImages[70].length();
     debugStream.println("LBRACE: "+ matchedToken.image);
         break;
      case 71 :
        image.append(jjstrLiteralImages[71]);
        lengthOfMatch = jjstrLiteralImages[71].length();
     debugStream.println("RBRACE: "+ matchedToken.image);
         break;
      case 72 :
        image.append(jjstrLiteralImages[72]);
        lengthOfMatch = jjstrLiteralImages[72].length();
     debugStream.println("LBRACKET: "+ matchedToken.image);
         break;
      case 73 :
        image.append(jjstrLiteralImages[73]);
        lengthOfMatch = jjstrLiteralImages[73].length();
     debugStream.println("RBRACKET: "+ matchedToken.image);
         break;
      case 74 :
        image.append(jjstrLiteralImages[74]);
        lengthOfMatch = jjstrLiteralImages[74].length();
     debugStream.println("SEMICOLON: "+ matchedToken.image);
         break;
      case 75 :
        image.append(jjstrLiteralImages[75]);
        lengthOfMatch = jjstrLiteralImages[75].length();
     debugStream.println("COMMA: "+ matchedToken.image);
         break;
      case 76 :
        image.append(jjstrLiteralImages[76]);
        lengthOfMatch = jjstrLiteralImages[76].length();
     debugStream.println("DOT: "+ matchedToken.image);
         break;
      case 77 :
        image.append(jjstrLiteralImages[77]);
        lengthOfMatch = jjstrLiteralImages[77].length();
     debugStream.println("ASSIGN: "+ matchedToken.image);
         break;
      case 78 :
        image.append(jjstrLiteralImages[78]);
        lengthOfMatch = jjstrLiteralImages[78].length();
     debugStream.println("LT: "+ matchedToken.image);
         break;
      case 79 :
        image.append(jjstrLiteralImages[79]);
        lengthOfMatch = jjstrLiteralImages[79].length();
     debugStream.println("BANG: "+ matchedToken.image);
         break;
      case 80 :
        image.append(jjstrLiteralImages[80]);
        lengthOfMatch = jjstrLiteralImages[80].length();
     debugStream.println("TILDE: "+ matchedToken.image);
         break;
      case 81 :
        image.append(jjstrLiteralImages[81]);
        lengthOfMatch = jjstrLiteralImages[81].length();
     debugStream.println("HOOK: "+ matchedToken.image);
         break;
      case 82 :
        image.append(jjstrLiteralImages[82]);
        lengthOfMatch = jjstrLiteralImages[82].length();
     debugStream.println("COLON: "+ matchedToken.image);
         break;
      case 83 :
        image.append(jjstrLiteralImages[83]);
        lengthOfMatch = jjstrLiteralImages[83].length();
     debugStream.println("EQ: "+ matchedToken.image);
         break;
      case 84 :
        image.append(jjstrLiteralImages[84]);
        lengthOfMatch = jjstrLiteralImages[84].length();
     debugStream.println("LE: "+ matchedToken.image);
         break;
      case 85 :
        image.append(jjstrLiteralImages[85]);
        lengthOfMatch = jjstrLiteralImages[85].length();
     debugStream.println("GE: "+ matchedToken.image);
         break;
      case 86 :
        image.append(jjstrLiteralImages[86]);
        lengthOfMatch = jjstrLiteralImages[86].length();
     debugStream.println("NE: "+ matchedToken.image);
         break;
      case 87 :
        image.append(jjstrLiteralImages[87]);
        lengthOfMatch = jjstrLiteralImages[87].length();
     debugStream.println("SC_OR: "+ matchedToken.image);
         break;
      case 88 :
        image.append(jjstrLiteralImages[88]);
        lengthOfMatch = jjstrLiteralImages[88].length();
     debugStream.println("SC_AND: "+ matchedToken.image);
         break;
      case 89 :
        image.append(jjstrLiteralImages[89]);
        lengthOfMatch = jjstrLiteralImages[89].length();
     debugStream.println("ICNR: "+ matchedToken.image);
         break;
      case 90 :
        image.append(jjstrLiteralImages[90]);
        lengthOfMatch = jjstrLiteralImages[90].length();
     debugStream.println("DECR: "+ matchedToken.image);
         break;
      case 91 :
        image.append(jjstrLiteralImages[91]);
        lengthOfMatch = jjstrLiteralImages[91].length();
     debugStream.println("PLUS: "+ matchedToken.image);
         break;
      case 92 :
        image.append(jjstrLiteralImages[92]);
        lengthOfMatch = jjstrLiteralImages[92].length();
     debugStream.println("MINUS: "+ matchedToken.image);
         break;
      case 93 :
        image.append(jjstrLiteralImages[93]);
        lengthOfMatch = jjstrLiteralImages[93].length();
     debugStream.println("STAR: "+ matchedToken.image);
         break;
      case 94 :
        image.append(jjstrLiteralImages[94]);
        lengthOfMatch = jjstrLiteralImages[94].length();
     debugStream.println("SLASH: "+ matchedToken.image);
         break;
      case 95 :
        image.append(jjstrLiteralImages[95]);
        lengthOfMatch = jjstrLiteralImages[95].length();
     debugStream.println("BIT_AND: "+ matchedToken.image);
         break;
      case 96 :
        image.append(jjstrLiteralImages[96]);
        lengthOfMatch = jjstrLiteralImages[96].length();
     debugStream.println("BIT_OR: "+ matchedToken.image);
         break;
      case 97 :
        image.append(jjstrLiteralImages[97]);
        lengthOfMatch = jjstrLiteralImages[97].length();
     debugStream.println("XOR: "+ matchedToken.image);
         break;
      case 98 :
        image.append(jjstrLiteralImages[98]);
        lengthOfMatch = jjstrLiteralImages[98].length();
     debugStream.println("REM: "+ matchedToken.image);
         break;
      case 99 :
        image.append(jjstrLiteralImages[99]);
        lengthOfMatch = jjstrLiteralImages[99].length();
     debugStream.println("PLUS_ASSIGN: "+ matchedToken.image);
         break;
      case 100 :
        image.append(jjstrLiteralImages[100]);
        lengthOfMatch = jjstrLiteralImages[100].length();
     debugStream.println("MINUS_ASSIGN: "+ matchedToken.image);
         break;
      case 101 :
        image.append(jjstrLiteralImages[101]);
        lengthOfMatch = jjstrLiteralImages[101].length();
     debugStream.println("STAR_ASSIGN: "+ matchedToken.image);
         break;
      case 102 :
        image.append(jjstrLiteralImages[102]);
        lengthOfMatch = jjstrLiteralImages[102].length();
     debugStream.println("SLASH_ASSIGN: "+ matchedToken.image);
         break;
      case 103 :
        image.append(jjstrLiteralImages[103]);
        lengthOfMatch = jjstrLiteralImages[103].length();
     debugStream.println("AND_ASSIGN: "+ matchedToken.image);
         break;
      case 104 :
        image.append(jjstrLiteralImages[104]);
        lengthOfMatch = jjstrLiteralImages[104].length();
     debugStream.println("OR_ASSIGN: "+ matchedToken.image);
         break;
      case 105 :
        image.append(jjstrLiteralImages[105]);
        lengthOfMatch = jjstrLiteralImages[105].length();
     debugStream.println("XOR_ASSIGN: "+ matchedToken.image);
         break;
      case 106 :
        image.append(jjstrLiteralImages[106]);
        lengthOfMatch = jjstrLiteralImages[106].length();
     debugStream.println("REM_ASSIGN: "+ matchedToken.image);
         break;
      case 107 :
        image.append(jjstrLiteralImages[107]);
        lengthOfMatch = jjstrLiteralImages[107].length();
     debugStream.println("RSHIFT_ASSIGN: "+ matchedToken.image);
         break;
      case 108 :
        image.append(jjstrLiteralImages[108]);
        lengthOfMatch = jjstrLiteralImages[108].length();
       debugStream.println("LSHIFT_ASSIGN: "+ matchedToken.image);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
