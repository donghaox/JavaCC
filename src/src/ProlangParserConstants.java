/* Generated By:JavaCC: Do not edit this line. ProlangParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ProlangParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IGNORE = 1;
  /** RegularExpression Id. */
  int COMMENT_LINE = 2;
  /** RegularExpression Id. */
  int COMMENT_BLOCK = 3;
  /** RegularExpression Id. */
  int ABSTRACT = 4;
  /** RegularExpression Id. */
  int BOOLEAN = 5;
  /** RegularExpression Id. */
  int BREAK = 6;
  /** RegularExpression Id. */
  int BYTE = 7;
  /** RegularExpression Id. */
  int CASE = 8;
  /** RegularExpression Id. */
  int CATCH = 9;
  /** RegularExpression Id. */
  int CHAR = 10;
  /** RegularExpression Id. */
  int CLASS = 11;
  /** RegularExpression Id. */
  int CONST = 12;
  /** RegularExpression Id. */
  int CONTINUE = 13;
  /** RegularExpression Id. */
  int DEF = 14;
  /** RegularExpression Id. */
  int DO = 15;
  /** RegularExpression Id. */
  int DOUBLE = 16;
  /** RegularExpression Id. */
  int ELSE = 17;
  /** RegularExpression Id. */
  int ENUM = 18;
  /** RegularExpression Id. */
  int EXTENDS = 19;
  /** RegularExpression Id. */
  int FALSE = 20;
  /** RegularExpression Id. */
  int FINAL = 21;
  /** RegularExpression Id. */
  int FINALLY = 22;
  /** RegularExpression Id. */
  int FLOAT = 23;
  /** RegularExpression Id. */
  int FOR = 24;
  /** RegularExpression Id. */
  int GOTO = 25;
  /** RegularExpression Id. */
  int IF = 26;
  /** RegularExpression Id. */
  int IMPLEMENTS = 27;
  /** RegularExpression Id. */
  int IMPORTS = 28;
  /** RegularExpression Id. */
  int INSTANCEOF = 29;
  /** RegularExpression Id. */
  int INT = 30;
  /** RegularExpression Id. */
  int INTERFACE = 31;
  /** RegularExpression Id. */
  int LONG = 32;
  /** RegularExpression Id. */
  int NATIVE = 33;
  /** RegularExpression Id. */
  int NEW = 34;
  /** RegularExpression Id. */
  int NULL = 35;
  /** RegularExpression Id. */
  int PACKAGE = 36;
  /** RegularExpression Id. */
  int PRIVATE = 37;
  /** RegularExpression Id. */
  int PROTECTED = 38;
  /** RegularExpression Id. */
  int PUBLIC = 39;
  /** RegularExpression Id. */
  int RETURN = 40;
  /** RegularExpression Id. */
  int SHORT = 41;
  /** RegularExpression Id. */
  int STATIC = 42;
  /** RegularExpression Id. */
  int STRICTFP = 43;
  /** RegularExpression Id. */
  int SUPER = 44;
  /** RegularExpression Id. */
  int SWITCH = 45;
  /** RegularExpression Id. */
  int SYCHRONIZED = 46;
  /** RegularExpression Id. */
  int THIS = 47;
  /** RegularExpression Id. */
  int THROW = 48;
  /** RegularExpression Id. */
  int THROWS = 49;
  /** RegularExpression Id. */
  int TRANSIENT = 50;
  /** RegularExpression Id. */
  int TRUE = 51;
  /** RegularExpression Id. */
  int TRY = 52;
  /** RegularExpression Id. */
  int VOID = 53;
  /** RegularExpression Id. */
  int VOLATILE = 54;
  /** RegularExpression Id. */
  int WHILE = 55;
  /** RegularExpression Id. */
  int DECIMAL = 56;
  /** RegularExpression Id. */
  int OCTAL = 57;
  /** RegularExpression Id. */
  int HEX = 58;
  /** RegularExpression Id. */
  int REAL = 59;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 60;
  /** RegularExpression Id. */
  int DIGIT = 61;
  /** RegularExpression Id. */
  int LOWER_CASE = 62;
  /** RegularExpression Id. */
  int UPPER_CASE = 63;
  /** RegularExpression Id. */
  int LETTER = 64;
  /** RegularExpression Id. */
  int ID = 65;
  /** RegularExpression Id. */
  int CHARARCTER = 66;
  /** RegularExpression Id. */
  int STRING = 67;
  /** RegularExpression Id. */
  int LPAREN = 68;
  /** RegularExpression Id. */
  int RPAREN = 69;
  /** RegularExpression Id. */
  int LBRACE = 70;
  /** RegularExpression Id. */
  int RBRACE = 71;
  /** RegularExpression Id. */
  int LBRACKET = 72;
  /** RegularExpression Id. */
  int RBRACKET = 73;
  /** RegularExpression Id. */
  int SEMICOLON = 74;
  /** RegularExpression Id. */
  int COMMA = 75;
  /** RegularExpression Id. */
  int DOT = 76;
  /** RegularExpression Id. */
  int ASSIGN = 77;
  /** RegularExpression Id. */
  int LT = 78;
  /** RegularExpression Id. */
  int BANG = 79;
  /** RegularExpression Id. */
  int TILDE = 80;
  /** RegularExpression Id. */
  int HOOK = 81;
  /** RegularExpression Id. */
  int COLON = 82;
  /** RegularExpression Id. */
  int EQ = 83;
  /** RegularExpression Id. */
  int LE = 84;
  /** RegularExpression Id. */
  int GE = 85;
  /** RegularExpression Id. */
  int NE = 86;
  /** RegularExpression Id. */
  int SC_OR = 87;
  /** RegularExpression Id. */
  int SC_AND = 88;
  /** RegularExpression Id. */
  int INCR = 89;
  /** RegularExpression Id. */
  int DECR = 90;
  /** RegularExpression Id. */
  int PLUS = 91;
  /** RegularExpression Id. */
  int MINUS = 92;
  /** RegularExpression Id. */
  int STAR = 93;
  /** RegularExpression Id. */
  int SLASH = 94;
  /** RegularExpression Id. */
  int BIT_AND = 95;
  /** RegularExpression Id. */
  int BIT_OR = 96;
  /** RegularExpression Id. */
  int XOR = 97;
  /** RegularExpression Id. */
  int REM = 98;
  /** RegularExpression Id. */
  int PLUSASSIGN = 99;
  /** RegularExpression Id. */
  int MINUSASSIGN = 100;
  /** RegularExpression Id. */
  int STARASSIGN = 101;
  /** RegularExpression Id. */
  int SLASHASSIGN = 102;
  /** RegularExpression Id. */
  int ANDASSIGN = 103;
  /** RegularExpression Id. */
  int ORASSIGN = 104;
  /** RegularExpression Id. */
  int XORASSIGN = 105;
  /** RegularExpression Id. */
  int REMASSIGN = 106;
  /** RegularExpression Id. */
  int RSHIFT_ASSIGN = 107;
  /** RegularExpression Id. */
  int LSHIFT_ASSIGN = 108;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<IGNORE>",
    "<COMMENT_LINE>",
    "<COMMENT_BLOCK>",
    "\"abstract\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"imports\"",
    "\"instanceof\"",
    "\"int\"",
    "\"instance\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"strictfp\"",
    "\"super\"",
    "\"switch\"",
    "\"sychronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "<DECIMAL>",
    "<OCTAL>",
    "<HEX>",
    "<REAL>",
    "<DECIMAL_EXPONENT>",
    "<DIGIT>",
    "<LOWER_CASE>",
    "<UPPER_CASE>",
    "<LETTER>",
    "<ID>",
    "<CHARARCTER>",
    "<STRING>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\">>=\"",
    "\"<<=\"",
  };

}
