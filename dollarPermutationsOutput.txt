Call:   start
RESERVED_WORD token: package
  Consumed token: <"package" at line 1 column 1>
IDENTIFIER token: main
  Consumed token: <<IDENTIFIER>: "main" at line 1 column 9>
  Call:   statementList
IDENTIFIER token: quarter
    Call:   statement
RESERVED_WORD token: int
      Call:   declarationStatement
        Call:   variableDeclaration
          Call:   identifier
            Consumed token: <<IDENTIFIER>: "quarter" at line 2 column 1>
          Return: identifier
          Call:   type
            Consumed token: <"int" at line 2 column 9>
          Return: type
        Return: variableDeclaration
        Consumed token: <";" at line 2 column 12>
      Return: declarationStatement
    Return: statement
IDENTIFIER token: dime
    Call:   statement
RESERVED_WORD token: int
      Call:   declarationStatement
        Call:   variableDeclaration
          Call:   identifier
            Consumed token: <<IDENTIFIER>: "dime" at line 3 column 1>
          Return: identifier
          Call:   type
            Consumed token: <"int" at line 3 column 6>
          Return: type
        Return: variableDeclaration
        Consumed token: <";" at line 3 column 9>
      Return: declarationStatement
    Return: statement
IDENTIFIER token: nickel
    Call:   statement
RESERVED_WORD token: int
      Call:   declarationStatement
        Call:   variableDeclaration
          Call:   identifier
            Consumed token: <<IDENTIFIER>: "nickel" at line 4 column 1>
          Return: identifier
          Call:   type
            Consumed token: <"int" at line 4 column 8>
          Return: type
        Return: variableDeclaration
        Consumed token: <";" at line 4 column 11>
      Return: declarationStatement
    Return: statement
IDENTIFIER token: penny
    Call:   statement
RESERVED_WORD token: int
      Call:   declarationStatement
        Call:   variableDeclaration
          Call:   identifier
            Consumed token: <<IDENTIFIER>: "penny" at line 5 column 1>
          Return: identifier
          Call:   type
            Consumed token: <"int" at line 5 column 7>
          Return: type
        Return: variableDeclaration
        Consumed token: <";" at line 5 column 10>
      Return: declarationStatement
    Return: statement
RESERVED_WORD token: for
    Call:   statement
      Call:   forStatement
        Consumed token: <"for" at line 7 column 1>
        Call:   forClause
IDENTIFIER token: quarter
EQUALS token: =
          Call:   assignmentStatement
            Call:   identifier
              Consumed token: <<IDENTIFIER>: "quarter" at line 7 column 5>
            Return: identifier
            Consumed token: <"=" at line 7 column 13>
            Call:   expression
              Call:   term
                Call:   operand
INTEGER_NUMBER token: 0
                  Call:   integerConstant
                    Consumed token: <<INTEGER_NUMBER>: "0" at line 7 column 15>
                  Return: integerConstant
                Return: operand
              Return: term
            Return: expression
          Return: assignmentStatement
          Consumed token: <";" at line 7 column 16>
          Call:   expression
            Call:   term
              Call:   operand
IDENTIFIER token: quarter
                Call:   identifier
                  Consumed token: <<IDENTIFIER>: "quarter" at line 7 column 18>
                Return: identifier
              Return: operand
LESS_EQUALS token: <=
            Return: term
            Consumed token: <"<=" at line 7 column 26>
            Call:   term
              Call:   operand
INTEGER_NUMBER token: 4
                Call:   integerConstant
                  Consumed token: <<INTEGER_NUMBER>: "4" at line 7 column 29>
                Return: integerConstant
              Return: operand
            Return: term
          Return: expression
          Consumed token: <";" at line 7 column 30>
IDENTIFIER token: quarter
INCREMENT token: ++
          Call:   increment
            Call:   identifier
              Consumed token: <<IDENTIFIER>: "quarter" at line 7 column 32>
            Return: identifier
            Consumed token: <"++" at line 7 column 39>
          Return: increment
        Return: forClause
        Call:   block
OPEN_BRACE token: {
          Consumed token: <"{" at line 7 column 42>
          Call:   statementList
RESERVED_WORD token: for
            Call:   statement
              Call:   forStatement
                Consumed token: <"for" at line 8 column 5>
                Call:   forClause
IDENTIFIER token: dime
EQUALS token: =
                  Call:   assignmentStatement
                    Call:   identifier
                      Consumed token: <<IDENTIFIER>: "dime" at line 8 column 9>
                    Return: identifier
                    Consumed token: <"=" at line 8 column 14>
                    Call:   expression
                      Call:   term
                        Call:   operand
INTEGER_NUMBER token: 0
                          Call:   integerConstant
                            Consumed token: <<INTEGER_NUMBER>: "0" at line 8 column 16>
                          Return: integerConstant
                        Return: operand
                      Return: term
                    Return: expression
                  Return: assignmentStatement
                  Consumed token: <";" at line 8 column 17>
                  Call:   expression
                    Call:   term
                      Call:   operand
IDENTIFIER token: dime
                        Call:   identifier
                          Consumed token: <<IDENTIFIER>: "dime" at line 8 column 19>
                        Return: identifier
                      Return: operand
LESS_EQUALS token: <=
                    Return: term
                    Consumed token: <"<=" at line 8 column 24>
                    Call:   term
                      Call:   operand
INTEGER_NUMBER token: 10
                        Call:   integerConstant
                          Consumed token: <<INTEGER_NUMBER>: "10" at line 8 column 27>
                        Return: integerConstant
                      Return: operand
                    Return: term
                  Return: expression
                  Consumed token: <";" at line 8 column 29>
IDENTIFIER token: dime
INCREMENT token: ++
                  Call:   increment
                    Call:   identifier
                      Consumed token: <<IDENTIFIER>: "dime" at line 8 column 31>
                    Return: identifier
                    Consumed token: <"++" at line 8 column 35>
                  Return: increment
                Return: forClause
                Call:   block
OPEN_BRACE token: {
                  Consumed token: <"{" at line 8 column 38>
                  Call:   statementList
RESERVED_WORD token: for
                    Call:   statement
                      Call:   forStatement
                        Consumed token: <"for" at line 9 column 9>
                        Call:   forClause
IDENTIFIER token: nickel
EQUALS token: =
                          Call:   assignmentStatement
                            Call:   identifier
                              Consumed token: <<IDENTIFIER>: "nickel" at line 9 column 13>
                            Return: identifier
                            Consumed token: <"=" at line 9 column 20>
                            Call:   expression
                              Call:   term
                                Call:   operand
INTEGER_NUMBER token: 0
                                  Call:   integerConstant
                                    Consumed token: <<INTEGER_NUMBER>: "0" at line 9 column 22>
                                  Return: integerConstant
                                Return: operand
                              Return: term
                            Return: expression
                          Return: assignmentStatement
                          Consumed token: <";" at line 9 column 23>
                          Call:   expression
                            Call:   term
                              Call:   operand
IDENTIFIER token: nickel
                                Call:   identifier
                                  Consumed token: <<IDENTIFIER>: "nickel" at line 9 column 25>
                                Return: identifier
                              Return: operand
LESS_EQUALS token: <=
                            Return: term
                            Consumed token: <"<=" at line 9 column 32>
                            Call:   term
                              Call:   operand
INTEGER_NUMBER token: 20
                                Call:   integerConstant
                                  Consumed token: <<INTEGER_NUMBER>: "20" at line 9 column 35>
                                Return: integerConstant
                              Return: operand
                            Return: term
                          Return: expression
                          Consumed token: <";" at line 9 column 37>
IDENTIFIER token: nickel
INCREMENT token: ++
                          Call:   increment
                            Call:   identifier
                              Consumed token: <<IDENTIFIER>: "nickel" at line 9 column 39>
                            Return: identifier
                            Consumed token: <"++" at line 9 column 45>
                          Return: increment
                        Return: forClause
                        Call:   block
OPEN_BRACE token: {
                          Consumed token: <"{" at line 9 column 48>
                          Call:   statementList
RESERVED_WORD token: for
                            Call:   statement
                              Call:   forStatement
                                Consumed token: <"for" at line 10 column 13>
                                Call:   forClause
IDENTIFIER token: penny
EQUALS token: =
                                  Call:   assignmentStatement
                                    Call:   identifier
                                      Consumed token: <<IDENTIFIER>: "penny" at line 10 column 17>
                                    Return: identifier
                                    Consumed token: <"=" at line 10 column 23>
                                    Call:   expression
                                      Call:   term
                                        Call:   operand
INTEGER_NUMBER token: 0
                                          Call:   integerConstant
                                            Consumed token: <<INTEGER_NUMBER>: "0" at line 10 column 25>
                                          Return: integerConstant
                                        Return: operand
                                      Return: term
                                    Return: expression
                                  Return: assignmentStatement
                                  Consumed token: <";" at line 10 column 26>
                                  Call:   expression
                                    Call:   term
                                      Call:   operand
IDENTIFIER token: penny
                                        Call:   identifier
                                          Consumed token: <<IDENTIFIER>: "penny" at line 10 column 28>
                                        Return: identifier
                                      Return: operand
LESS_EQUALS token: <=
                                    Return: term
                                    Consumed token: <"<=" at line 10 column 34>
                                    Call:   term
                                      Call:   operand
INTEGER_NUMBER token: 100
                                        Call:   integerConstant
                                          Consumed token: <<INTEGER_NUMBER>: "100" at line 10 column 37>
                                        Return: integerConstant
                                      Return: operand
                                    Return: term
                                  Return: expression
                                  Consumed token: <";" at line 10 column 40>
IDENTIFIER token: penny
INCREMENT token: ++
                                  Call:   increment
                                    Call:   identifier
                                      Consumed token: <<IDENTIFIER>: "penny" at line 10 column 42>
                                    Return: identifier
                                    Consumed token: <"++" at line 10 column 47>
                                  Return: increment
                                Return: forClause
                                Call:   block
OPEN_BRACE token: {
                                  Consumed token: <"{" at line 10 column 50>
                                  Call:   statementList
RESERVED_WORD token: if
                                    Call:   statement
                                      Call:   ifStatement
                                        Consumed token: <"if" at line 11 column 17>
                                        Call:   expression
                                          Call:   term
                                            Call:   operand
IDENTIFIER token: quarter
                                              Call:   identifier
                                                Consumed token: <<IDENTIFIER>: "quarter" at line 11 column 20>
                                              Return: identifier
                                            Return: operand
MULTIPLY token: *
                                            Consumed token: <"*" at line 11 column 28>
                                            Call:   operand
INTEGER_NUMBER token: 25
                                              Call:   integerConstant
                                                Consumed token: <<INTEGER_NUMBER>: "25" at line 11 column 30>
                                              Return: integerConstant
                                            Return: operand
PLUS token: +
                                          Return: term
                                          Consumed token: <"+" at line 11 column 33>
                                          Call:   term
                                            Call:   operand
IDENTIFIER token: dime
                                              Call:   identifier
                                                Consumed token: <<IDENTIFIER>: "dime" at line 11 column 35>
                                              Return: identifier
                                            Return: operand
MULTIPLY token: *
                                            Consumed token: <"*" at line 11 column 40>
                                            Call:   operand
INTEGER_NUMBER token: 10
                                              Call:   integerConstant
                                                Consumed token: <<INTEGER_NUMBER>: "10" at line 11 column 42>
                                              Return: integerConstant
                                            Return: operand
PLUS token: +
                                          Return: term
                                          Consumed token: <"+" at line 11 column 45>
                                          Call:   term
                                            Call:   operand
IDENTIFIER token: nickel
                                              Call:   identifier
                                                Consumed token: <<IDENTIFIER>: "nickel" at line 11 column 47>
                                              Return: identifier
                                            Return: operand
MULTIPLY token: *
                                            Consumed token: <"*" at line 11 column 54>
                                            Call:   operand
INTEGER_NUMBER token: 5
                                              Call:   integerConstant
                                                Consumed token: <<INTEGER_NUMBER>: "5" at line 11 column 56>
                                              Return: integerConstant
                                            Return: operand
PLUS token: +
                                          Return: term
                                          Consumed token: <"+" at line 11 column 58>
                                          Call:   term
                                            Call:   operand
IDENTIFIER token: penny
                                              Call:   identifier
                                                Consumed token: <<IDENTIFIER>: "penny" at line 11 column 60>
                                              Return: identifier
                                            Return: operand
EQUAL_EQUAL token: ==
                                          Return: term
                                          Consumed token: <"==" at line 11 column 66>
                                          Call:   term
                                            Call:   operand
INTEGER_NUMBER token: 100
                                              Call:   integerConstant
                                                Consumed token: <<INTEGER_NUMBER>: "100" at line 11 column 69>
                                              Return: integerConstant
                                            Return: operand
OPEN_BRACE token: {
                                          Return: term
                                        Return: expression
                                        Call:   block
                                          Consumed token: <"{" at line 11 column 73>
                                          Call:   statementList
                                            Call:   statement
                                              Call:   printStatement
                                                Consumed token: <"Println" at line 12 column 21>
OPEN_PAREN token: (
                                                Consumed token: <"(" at line 12 column 28>
                                                Call:   expression
                                                  Call:   term
                                                    Call:   operand
INTERPRETED_STRING token: "These make up a dollar"
                                                      Call:   interpretedString
                                                        Consumed token: <<INTERPRETED_STRING>: ""These make up a dollar"" at line 12 column 29>
                                                      Return: interpretedString
                                                    Return: operand
CLOSE_PAREN token: )
                                                  Return: term
                                                Return: expression
                                                Consumed token: <")" at line 12 column 53>
                                              Return: printStatement
                                              Consumed token: <";" at line 12 column 54>
                                            Return: statement
                                            Call:   statement
                                              Call:   printStatement
                                                Consumed token: <"Println" at line 13 column 21>
OPEN_PAREN token: (
                                                Consumed token: <"(" at line 13 column 28>
                                                Call:   expression
                                                  Call:   term
                                                    Call:   operand
INTERPRETED_STRING token: "Quarters: "
                                                      Call:   interpretedString
                                                        Consumed token: <<INTERPRETED_STRING>: ""Quarters: "" at line 13 column 29>
                                                      Return: interpretedString
                                                    Return: operand
PLUS token: +
                                                  Return: term
                                                  Consumed token: <"+" at line 13 column 42>
                                                  Call:   term
                                                    Call:   operand
IDENTIFIER token: quarter
                                                      Call:   identifier
                                                        Consumed token: <<IDENTIFIER>: "quarter" at line 13 column 44>
                                                      Return: identifier
                                                    Return: operand
CLOSE_PAREN token: )
                                                  Return: term
                                                Return: expression
                                                Consumed token: <")" at line 13 column 51>
                                              Return: printStatement
                                              Consumed token: <";" at line 13 column 52>
                                            Return: statement
                                            Call:   statement
                                              Call:   printStatement
                                                Consumed token: <"Println" at line 14 column 21>
OPEN_PAREN token: (
                                                Consumed token: <"(" at line 14 column 28>
                                                Call:   expression
                                                  Call:   term
                                                    Call:   operand
INTERPRETED_STRING token: "Dimes: "
                                                      Call:   interpretedString
                                                        Consumed token: <<INTERPRETED_STRING>: ""Dimes: "" at line 14 column 29>
                                                      Return: interpretedString
                                                    Return: operand
PLUS token: +
                                                  Return: term
                                                  Consumed token: <"+" at line 14 column 39>
                                                  Call:   term
                                                    Call:   operand
IDENTIFIER token: dime
                                                      Call:   identifier
                                                        Consumed token: <<IDENTIFIER>: "dime" at line 14 column 41>
                                                      Return: identifier
                                                    Return: operand
CLOSE_PAREN token: )
                                                  Return: term
                                                Return: expression
                                                Consumed token: <")" at line 14 column 45>
                                              Return: printStatement
                                              Consumed token: <";" at line 14 column 46>
                                            Return: statement
                                            Call:   statement
                                              Call:   printStatement
                                                Consumed token: <"Println" at line 15 column 21>
OPEN_PAREN token: (
                                                Consumed token: <"(" at line 15 column 28>
                                                Call:   expression
                                                  Call:   term
                                                    Call:   operand
INTERPRETED_STRING token: "Nickels: "
                                                      Call:   interpretedString
                                                        Consumed token: <<INTERPRETED_STRING>: ""Nickels: "" at line 15 column 29>
                                                      Return: interpretedString
                                                    Return: operand
PLUS token: +
                                                  Return: term
                                                  Consumed token: <"+" at line 15 column 41>
                                                  Call:   term
                                                    Call:   operand
IDENTIFIER token: nickel
                                                      Call:   identifier
                                                        Consumed token: <<IDENTIFIER>: "nickel" at line 15 column 43>
                                                      Return: identifier
                                                    Return: operand
CLOSE_PAREN token: )
                                                  Return: term
                                                Return: expression
                                                Consumed token: <")" at line 15 column 49>
                                              Return: printStatement
                                              Consumed token: <";" at line 15 column 50>
                                            Return: statement
                                            Call:   statement
                                              Call:   printStatement
                                                Consumed token: <"Println" at line 16 column 21>
OPEN_PAREN token: (
                                                Consumed token: <"(" at line 16 column 28>
                                                Call:   expression
                                                  Call:   term
                                                    Call:   operand
INTERPRETED_STRING token: "Pennies: "
                                                      Call:   interpretedString
                                                        Consumed token: <<INTERPRETED_STRING>: ""Pennies: "" at line 16 column 29>
                                                      Return: interpretedString
                                                    Return: operand
PLUS token: +
                                                  Return: term
                                                  Consumed token: <"+" at line 16 column 41>
                                                  Call:   term
                                                    Call:   operand
IDENTIFIER token: penny
                                                      Call:   identifier
                                                        Consumed token: <<IDENTIFIER>: "penny" at line 16 column 43>
                                                      Return: identifier
                                                    Return: operand
CLOSE_PAREN token: )
                                                  Return: term
                                                Return: expression
                                                Consumed token: <")" at line 16 column 48>
                                              Return: printStatement
                                              Consumed token: <";" at line 16 column 49>
                                            Return: statement
CLOSE_BRACE token: }
                                          Return: statementList
                                          Consumed token: <"}" at line 17 column 17>
                                        Return: block
CLOSE_BRACE token: }
                                      Return: ifStatement
                                    Return: statement
                                  Return: statementList
                                  Consumed token: <"}" at line 18 column 13>
                                Return: block
                              Return: forStatement
                            Return: statement
CLOSE_BRACE token: }
                          Return: statementList
                          Consumed token: <"}" at line 19 column 9>
                        Return: block
                      Return: forStatement
                    Return: statement
CLOSE_BRACE token: }
                  Return: statementList
                  Consumed token: <"}" at line 20 column 5>
                Return: block
              Return: forStatement
            Return: statement
CLOSE_BRACE token: }
          Return: statementList
          Consumed token: <"}" at line 21 column 1>
        Return: block
      Return: forStatement
    Return: statement
  Return: statementList
  Consumed token: <<EOF> at line 22 column 1>
Return: start

===== CROSS-REFERENCE TABLE =====

*** PACKAGE main ***

Identifier       Line numbers    Type specification
----------       ------------    ------------------
dime             003 008 008 008 011 014
                                 Defined as: variable
                                 Scope nesting level: 1
                                 Type form = scalar, Type id = int
nickel           004 009 009 009 011 015
                                 Defined as: variable
                                 Scope nesting level: 1
                                 Type form = scalar, Type id = int
penny            005 010 010 010 011 016
                                 Defined as: variable
                                 Scope nesting level: 1
                                 Type form = scalar, Type id = int
quarter          002 007 007 007 011 013
                                 Defined as: variable
                                 Scope nesting level: 1
                                 Type form = scalar, Type id = int

===== INTERMEDIATE CODE =====

*** PACKAGE main ***

<statementList>
    <variableDeclaration>
        <identifier id="quarter" level="1" index="0" type_id="int" />
    </variableDeclaration>
    <variableDeclaration>
        <identifier id="dime" level="1" index="1" type_id="int" />
    </variableDeclaration>
    <variableDeclaration>
        <identifier id="nickel" level="1" index="2" type_id="int" />
    </variableDeclaration>
    <variableDeclaration>
        <identifier id="penny" level="1" index="3" type_id="int" />
    </variableDeclaration>
    <forStatement>
        <forClause>
            <assignmentStatement type_id="int">
                <identifier id="quarter" level="1" index="0" type_id="int" />
                <integerConstant value="0" type_id="int" />
            </assignmentStatement>
            <lessEqual>
                <identifier id="quarter" level="1" index="0" type_id="int" />
                <integerConstant value="4" type_id="int" />
            </lessEqual>
            <increment type_id="int">
                <identifier id="quarter" level="1" index="0" type_id="int" />
            </increment>
        </forClause>
        <block>
            <statementList>
                <forStatement>
                    <forClause>
                        <assignmentStatement type_id="int">
                            <identifier id="dime" level="1" index="1" 
                                type_id="int" />
                            <integerConstant value="0" type_id="int" />
                        </assignmentStatement>
                        <lessEqual>
                            <identifier id="dime" level="1" index="1" 
                                type_id="int" />
                            <integerConstant value="10" type_id="int" />
                        </lessEqual>
                        <increment type_id="int">
                            <identifier id="dime" level="1" index="1" 
                                type_id="int" />
                        </increment>
                    </forClause>
                    <block>
                        <statementList>
                            <forStatement>
                                <forClause>
                                    <assignmentStatement type_id="int">
                                        <identifier id="nickel" level="1" 
                                            index="2" type_id="int" />
                                        <integerConstant value="0" type_id="int"
                                        />
                                    </assignmentStatement>
                                    <lessEqual>
                                        <identifier id="nickel" level="1" 
                                            index="2" type_id="int" />
                                        <integerConstant value="20" 
                                            type_id="int" />
                                    </lessEqual>
                                    <increment type_id="int">
                                        <identifier id="nickel" level="1" 
                                            index="2" type_id="int" />
                                    </increment>
                                </forClause>
                                <block>
                                    <statementList>
                                        <forStatement>
                                            <forClause>
                                                <assignmentStatement 
                                                    type_id="int">
                                                    <identifier id="penny" 
                                                        level="1" index="3" 
                                                        type_id="int" />
                                                    <integerConstant value="0" 
                                                        type_id="int" />
                                                </assignmentStatement>
                                                <lessEqual>
                                                    <identifier id="penny" 
                                                        level="1" index="3" 
                                                        type_id="int" />
                                                    <integerConstant value="100"
                                                        type_id="int" />
                                                </lessEqual>
                                                <increment type_id="int">
                                                    <identifier id="penny" 
                                                        level="1" index="3" 
                                                        type_id="int" />
                                                </increment>
                                            </forClause>
                                            <block>
                                                <statementList>
                                                    <ifStatement>
                                                        <equalEqual>
                                                            <add type_id="int">
                                                                <add 
                                                                    type_id="int"
                                                                >
                                                                    <add 
                                                                        type_id="int"
                                                                    >
                                                                        
                                                                        <multiply
                                                                            
                                                                            type_id="int"
                                                                        >
                                                                            
                                                                            <identifier
                                                                                
                                                                                id="quarter"
                                                                                
                                                                                level="1"
                                                                                
                                                                                index="0"
                                                                                
                                                                                type_id="int"
                                                                            />
                                                                            
                                                                            <integerConstant
                                                                                
                                                                                value="25"
                                                                                
                                                                                type_id="int"
                                                                            />
                                                                        
                                                                        </multiply>
                                                                        
                                                                        <multiply
                                                                            
                                                                            type_id="int"
                                                                        >
                                                                            
                                                                            <identifier
                                                                                
                                                                                id="dime"
                                                                                
                                                                                level="1"
                                                                                
                                                                                index="1"
                                                                                
                                                                                type_id="int"
                                                                            />
                                                                            
                                                                            <integerConstant
                                                                                
                                                                                value="10"
                                                                                
                                                                                type_id="int"
                                                                            />
                                                                        
                                                                        </multiply>
                                                                    </add>
                                                                    <multiply 
                                                                        type_id="int"
                                                                    >
                                                                        
                                                                        <identifier
                                                                            
                                                                            id="nickel"
                                                                            
                                                                            level="1"
                                                                            
                                                                            index="2"
                                                                            
                                                                            type_id="int"
                                                                        />
                                                                        
                                                                        <integerConstant
                                                                            
                                                                            value="5"
                                                                            
                                                                            type_id="int"
                                                                        />
                                                                    </multiply>
                                                                </add>
                                                                <identifier 
                                                                    id="penny" 
                                                                    level="1" 
                                                                    index="3" 
                                                                    type_id="int"
                                                                />
                                                            </add>
                                                            <integerConstant 
                                                                value="100" 
                                                                type_id="int" />
                                                        </equalEqual>
                                                        <block>
                                                            <statementList>
                                                                <printStatement 
                                                                    type_id="string"
                                                                >
                                                                    
                                                                    <interpretedString
                                                                        
                                                                        value=""These make up a dollar""
                                                                        
                                                                        type_id="string"
                                                                    />
                                                                
                                                                </printStatement>
                                                                <printStatement 
                                                                    type_id="string"
                                                                >
                                                                    <add 
                                                                        type_id="string"
                                                                    >
                                                                        
                                                                        <interpretedString
                                                                            
                                                                            value=""Quarters: ""
                                                                            
                                                                            type_id="string"
                                                                        />
                                                                        
                                                                        <identifier
                                                                            
                                                                            id="quarter"
                                                                            
                                                                            level="1"
                                                                            
                                                                            index="0"
                                                                            
                                                                            type_id="int"
                                                                        />
                                                                    </add>
                                                                
                                                                </printStatement>
                                                                <printStatement 
                                                                    type_id="string"
                                                                >
                                                                    <add 
                                                                        type_id="string"
                                                                    >
                                                                        
                                                                        <interpretedString
                                                                            
                                                                            value=""Dimes: ""
                                                                            
                                                                            type_id="string"
                                                                        />
                                                                        
                                                                        <identifier
                                                                            
                                                                            id="dime"
                                                                            
                                                                            level="1"
                                                                            
                                                                            index="1"
                                                                            
                                                                            type_id="int"
                                                                        />
                                                                    </add>
                                                                
                                                                </printStatement>
                                                                <printStatement 
                                                                    type_id="string"
                                                                >
                                                                    <add 
                                                                        type_id="string"
                                                                    >
                                                                        
                                                                        <interpretedString
                                                                            
                                                                            value=""Nickels: ""
                                                                            
                                                                            type_id="string"
                                                                        />
                                                                        
                                                                        <identifier
                                                                            
                                                                            id="nickel"
                                                                            
                                                                            level="1"
                                                                            
                                                                            index="2"
                                                                            
                                                                            type_id="int"
                                                                        />
                                                                    </add>
                                                                
                                                                </printStatement>
                                                                <printStatement 
                                                                    type_id="string"
                                                                >
                                                                    <add 
                                                                        type_id="string"
                                                                    >
                                                                        
                                                                        <interpretedString
                                                                            
                                                                            value=""Pennies: ""
                                                                            
                                                                            type_id="string"
                                                                        />
                                                                        
                                                                        <identifier
                                                                            
                                                                            id="penny"
                                                                            
                                                                            level="1"
                                                                            
                                                                            index="3"
                                                                            
                                                                            type_id="int"
                                                                        />
                                                                    </add>
                                                                
                                                                </printStatement>
                                                            </statementList>
                                                        </block>
                                                    </ifStatement>
                                                </statementList>
                                            </block>
                                        </forStatement>
                                    </statementList>
                                </block>
                            </forStatement>
                        </statementList>
                    </block>
                </forStatement>
            </statementList>
        </block>
    </forStatement>
</statementList>

Process finished with exit code 0
